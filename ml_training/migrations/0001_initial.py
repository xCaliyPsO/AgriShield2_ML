# Generated by Django 5.2.7 on 2025-10-27 00:23

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('dataset_type', models.CharField(choices=[('classification', 'Classification'), ('object_detection', 'Object Detection'), ('mixed', 'Mixed')], default='object_detection', max_length=20)),
                ('status', models.CharField(choices=[('preparing', 'Preparing'), ('ready', 'Ready'), ('processing', 'Processing'), ('error', 'Error')], default='preparing', max_length=20)),
                ('total_images', models.IntegerField(default=0)),
                ('train_images', models.IntegerField(default=0)),
                ('val_images', models.IntegerField(default=0)),
                ('test_images', models.IntegerField(default=0)),
                ('train_split', models.FloatField(default=0.7, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.9)])),
                ('val_split', models.FloatField(default=0.2, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.9)])),
                ('test_split', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(0.9)])),
                ('dataset_path', models.CharField(blank=True, max_length=500)),
                ('annotations_path', models.CharField(blank=True, max_length=500)),
                ('class_names', models.JSONField(default=list)),
                ('class_distribution', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_file', models.ImageField(upload_to='training_images/')),
                ('image_name', models.CharField(max_length=255)),
                ('image_type', models.CharField(choices=[('train', 'Training'), ('val', 'Validation'), ('test', 'Test')], default='train', max_length=10)),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('file_size_kb', models.IntegerField(default=0)),
                ('annotations_file', models.FileField(blank=True, upload_to='annotations/')),
                ('annotations_json', models.JSONField(blank=True, default=dict)),
                ('is_corrupted', models.BooleanField(default=False)),
                ('has_annotations', models.BooleanField(default=False)),
                ('annotation_count', models.IntegerField(default=0)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ml_training.dataset')),
            ],
            options={
                'ordering': ['dataset', 'image_name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('training_type', models.CharField(choices=[('classification', 'Classification'), ('object_detection', 'Object Detection'), ('fine_tuning', 'Fine Tuning')], default='object_detection', max_length=20)),
                ('model_architecture', models.CharField(choices=[('yolov8n', 'YOLOv8 Nano'), ('yolov8s', 'YOLOv8 Small'), ('yolov8m', 'YOLOv8 Medium'), ('yolov8l', 'YOLOv8 Large'), ('yolov8x', 'YOLOv8 Extra Large'), ('resnet18', 'ResNet18'), ('resnet50', 'ResNet50'), ('custom', 'Custom Architecture')], default='yolov8n', max_length=20)),
                ('epochs', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('batch_size', models.IntegerField(default=8, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(128)])),
                ('learning_rate', models.FloatField(default=0.001, validators=[django.core.validators.MinValueValidator(0.0001), django.core.validators.MaxValueValidator(1.0)])),
                ('weight_decay', models.FloatField(default=0.0001, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('momentum', models.FloatField(default=0.9, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('image_size', models.IntegerField(default=640, validators=[django.core.validators.MinValueValidator(32), django.core.validators.MaxValueValidator(2048)])),
                ('augmentation', models.BooleanField(default=True)),
                ('mixup', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('mosaic', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('pretrained_model_path', models.CharField(blank=True, max_length=500)),
                ('use_pretrained', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('paused', 'Paused')], default='pending', max_length=20)),
                ('current_epoch', models.IntegerField(default=0)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('gpu_used', models.BooleanField(default=False)),
                ('cpu_cores', models.IntegerField(default=1)),
                ('memory_usage_mb', models.IntegerField(default=0)),
                ('gpu_memory_usage_mb', models.IntegerField(default=0)),
                ('output_path', models.CharField(blank=True, max_length=500)),
                ('model_output_path', models.CharField(blank=True, max_length=500)),
                ('logs_path', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_training.dataset')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', max_length=10)),
                ('message', models.TextField()),
                ('epoch', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('training_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='ml_training.trainingjob')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TrainingReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_train_loss', models.FloatField(blank=True, null=True)),
                ('final_val_loss', models.FloatField(blank=True, null=True)),
                ('best_val_accuracy', models.FloatField(blank=True, null=True)),
                ('best_val_map50', models.FloatField(blank=True, null=True)),
                ('total_training_time', models.DurationField(blank=True, null=True)),
                ('epochs_completed', models.IntegerField(default=0)),
                ('early_stopped', models.BooleanField(default=False)),
                ('early_stop_epoch', models.IntegerField(blank=True, null=True)),
                ('peak_memory_usage_mb', models.IntegerField(default=0)),
                ('peak_gpu_memory_mb', models.IntegerField(default=0)),
                ('avg_epoch_time_seconds', models.FloatField(blank=True, null=True)),
                ('training_curves_image', models.ImageField(blank=True, upload_to='reports/curves/')),
                ('confusion_matrix_image', models.ImageField(blank=True, upload_to='reports/matrices/')),
                ('report_pdf', models.FileField(blank=True, upload_to='reports/pdf/')),
                ('class_performance', models.JSONField(blank=True, default=dict)),
                ('training_config', models.JSONField(blank=True, default=dict)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('training_job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='report', to='ml_training.trainingjob')),
            ],
        ),
        migrations.CreateModel(
            name='ModelCheckpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epoch', models.IntegerField()),
                ('checkpoint_file', models.FileField(blank=True, upload_to='checkpoints/')),
                ('checkpoint_path', models.CharField(max_length=500)),
                ('file_size_mb', models.FloatField(default=0.0)),
                ('val_loss', models.FloatField(blank=True, null=True)),
                ('val_accuracy', models.FloatField(blank=True, null=True)),
                ('val_map50', models.FloatField(blank=True, null=True)),
                ('is_best', models.BooleanField(default=False)),
                ('is_latest', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('training_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoints', to='ml_training.trainingjob')),
            ],
            options={
                'ordering': ['-epoch'],
                'unique_together': {('training_job', 'epoch')},
            },
        ),
        migrations.CreateModel(
            name='TrainingMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epoch', models.IntegerField()),
                ('metric_type', models.CharField(choices=[('loss', 'Loss'), ('accuracy', 'Accuracy'), ('precision', 'Precision'), ('recall', 'Recall'), ('f1_score', 'F1 Score'), ('map50', 'mAP@0.5'), ('map95', 'mAP@0.5:0.95'), ('lr', 'Learning Rate'), ('custom', 'Custom Metric')], max_length=20)),
                ('metric_name', models.CharField(max_length=100)),
                ('train_value', models.FloatField(blank=True, null=True)),
                ('val_value', models.FloatField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('training_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='ml_training.trainingjob')),
            ],
            options={
                'ordering': ['training_job', 'epoch', 'metric_type'],
                'unique_together': {('training_job', 'epoch', 'metric_type', 'metric_name')},
            },
        ),
    ]
