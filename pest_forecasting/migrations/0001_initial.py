# Generated by Django 5.2.7 on 2025-10-27 00:23

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pest_detection', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PestForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('location_name', models.CharField(max_length=200)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('forecast_date', models.DateField()),
                ('target_date', models.DateField()),
                ('forecast_type', models.CharField(choices=[('daily', 'Daily Forecast'), ('weekly', 'Weekly Forecast'), ('monthly', 'Monthly Forecast'), ('seasonal', 'Seasonal Forecast')], default='daily', max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('moderate', 'Moderate Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=20)),
                ('risk_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('predicted_pest_count', models.IntegerField(default=0)),
                ('predicted_outbreak_probability', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('weather_conditions', models.JSONField(default=dict)),
                ('management_recommendations', models.TextField(blank=True)),
                ('monitoring_recommendations', models.TextField(blank=True)),
                ('treatment_recommendations', models.TextField(blank=True)),
                ('actual_outcome', models.CharField(blank=True, choices=[('low', 'Low Risk'), ('moderate', 'Moderate Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=20, null=True)),
                ('actual_pest_count', models.IntegerField(blank=True, null=True)),
                ('forecast_accuracy', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pest_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pest_detection.pesttype')),
            ],
            options={
                'ordering': ['-target_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForecastFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('accurate', 'Accurate Forecast'), ('overestimated', 'Overestimated Risk'), ('underestimated', 'Underestimated Risk'), ('timing_off', 'Timing was Off'), ('conditions_changed', 'Weather Conditions Changed')], max_length=30)),
                ('observed_pest_count', models.IntegerField()),
                ('observed_weather_conditions', models.JSONField(blank=True, default=dict)),
                ('accuracy_rating', models.IntegerField(help_text='1=Very Inaccurate, 5=Very Accurate', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('forecast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='pest_forecasting.pestforecast')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForecastAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('alert_type', models.CharField(choices=[('outbreak_warning', 'Outbreak Warning'), ('high_risk', 'High Risk Alert'), ('monitoring', 'Monitoring Alert'), ('treatment_reminder', 'Treatment Reminder')], max_length=30)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('expired', 'Expired')], default='active', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('target_locations', models.JSONField(default=list)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('target_users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('forecast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='pest_forecasting.pestforecast')),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PestForecastModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('model_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('linear_regression', 'Linear Regression'), ('neural_network', 'Neural Network'), ('ensemble', 'Ensemble Model')], default='random_forest', max_length=20)),
                ('status', models.CharField(choices=[('training', 'Training'), ('ready', 'Ready'), ('deprecated', 'Deprecated'), ('error', 'Error')], default='training', max_length=20)),
                ('model_file', models.FileField(blank=True, upload_to='forecasting_models/')),
                ('model_path', models.CharField(blank=True, max_length=500)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('rmse', models.FloatField(blank=True, null=True)),
                ('mae', models.FloatField(blank=True, null=True)),
                ('r2_score', models.FloatField(blank=True, null=True)),
                ('training_data_points', models.IntegerField(default=0)),
                ('features_used', models.JSONField(default=list)),
                ('training_period_start', models.DateField(blank=True, null=True)),
                ('training_period_end', models.DateField(blank=True, null=True)),
                ('version', models.CharField(default='1.0', max_length=50)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pest_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pest_detection.pesttype')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='pestforecast',
            name='model_used',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pest_forecasting.pestforecastmodel'),
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=200)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('recorded_at', models.DateTimeField()),
                ('temperature', models.FloatField()),
                ('humidity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pressure', models.FloatField()),
                ('wind_speed', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('wind_direction', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('rainfall_1h', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0)])),
                ('rainfall_24h', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0)])),
                ('cloudiness', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('dew_point', models.FloatField(blank=True, null=True)),
                ('visibility', models.FloatField(blank=True, null=True)),
                ('uv_index', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('weather_main', models.CharField(blank=True, max_length=50)),
                ('weather_description', models.CharField(blank=True, max_length=100)),
                ('data_source', models.CharField(default='OpenWeatherMap', max_length=100)),
                ('is_forecast', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-recorded_at'],
                'unique_together': {('location_name', 'recorded_at')},
            },
        ),
        migrations.CreateModel(
            name='ForecastingAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('location_name', models.CharField(max_length=200)),
                ('total_forecasts', models.IntegerField(default=0)),
                ('high_risk_forecasts', models.IntegerField(default=0)),
                ('critical_risk_forecasts', models.IntegerField(default=0)),
                ('avg_forecast_accuracy', models.FloatField(blank=True, null=True)),
                ('total_feedback_count', models.IntegerField(default=0)),
                ('alerts_generated', models.IntegerField(default=0)),
                ('alerts_acknowledged', models.IntegerField(default=0)),
                ('avg_temperature', models.FloatField(blank=True, null=True)),
                ('avg_humidity', models.FloatField(blank=True, null=True)),
                ('total_rainfall', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pest_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pest_detection.pesttype')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('date', 'pest_type', 'location_name')},
            },
        ),
        migrations.CreateModel(
            name='HistoricalPestData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=200)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('recorded_date', models.DateField()),
                ('pest_count', models.IntegerField(default=0)),
                ('infestation_level', models.CharField(choices=[('none', 'No Infestation'), ('low', 'Low Infestation'), ('moderate', 'Moderate Infestation'), ('high', 'High Infestation'), ('severe', 'Severe Infestation')], default='none', max_length=20)),
                ('temperature', models.FloatField()),
                ('humidity', models.FloatField()),
                ('rainfall_7days', models.FloatField(default=0.0)),
                ('rainfall_14days', models.FloatField(default=0.0)),
                ('data_source', models.CharField(default='Manual Entry', max_length=100)),
                ('verified', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pest_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pest_detection.pesttype')),
            ],
            options={
                'ordering': ['-recorded_date'],
                'unique_together': {('pest_type', 'location_name', 'recorded_date')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='pestforecast',
            unique_together={('pest_type', 'location_name', 'target_date', 'forecast_type')},
        ),
    ]
